//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/julia/RiderProjects/NetGL/NetGL/Assets/shader_lang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class shader_langParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHADER=1, VERTEX=2, UNIFORM=3, VOID=4, USING=5, OUT=6, IN=7, LCURLY=8, 
		RCURLY=9, LPAREN=10, RPAREN=11, SEMI=12, COMMA=13, DOT=14, EQUALS=15, 
		VEC2=16, VEC3=17, VEC4=18, MAT4=19, SAMPLER2D=20, VERTEX_STAGE=21, IDENTIFIER=22, 
		STRING=23, WS=24, LINE_COMMENT=25, BLOCK_COMMENT=26;
	public const int
		RULE_shader = 0, RULE_shaderDecl = 1, RULE_usingDecls = 2, RULE_usingDecl = 3, 
		RULE_vertexBlock = 4, RULE_vertexDecls = 5, RULE_vertexDecl = 6, RULE_type = 7, 
		RULE_uniformBlock = 8, RULE_uniformDecls = 9, RULE_uniformDecl = 10, RULE_vertexStage = 11, 
		RULE_vertexStageParams = 12, RULE_vertexStageParam = 13, RULE_vertexBody = 14, 
		RULE_statement = 15, RULE_assignment = 16;
	public static readonly string[] ruleNames = {
		"shader", "shaderDecl", "usingDecls", "usingDecl", "vertexBlock", "vertexDecls", 
		"vertexDecl", "type", "uniformBlock", "uniformDecls", "uniformDecl", "vertexStage", 
		"vertexStageParams", "vertexStageParam", "vertexBody", "statement", "assignment"
	};

	private static readonly string[] _LiteralNames = {
		null, "'shader'", "'vertex'", "'uniform'", "'void'", "'using'", "'out'", 
		"'in'", "'{'", "'}'", "'('", "')'", "';'", "','", "'.'", "'='", "'vec2'", 
		"'vec3'", "'vec4'", "'mat4'", "'sampler2D'", "'vertex_stage'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHADER", "VERTEX", "UNIFORM", "VOID", "USING", "OUT", "IN", "LCURLY", 
		"RCURLY", "LPAREN", "RPAREN", "SEMI", "COMMA", "DOT", "EQUALS", "VEC2", 
		"VEC3", "VEC4", "MAT4", "SAMPLER2D", "VERTEX_STAGE", "IDENTIFIER", "STRING", 
		"WS", "LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "shader_lang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static shader_langParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public shader_langParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public shader_langParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ShaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDeclContext shaderDecl() {
			return GetRuleContext<ShaderDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclsContext usingDecls() {
			return GetRuleContext<UsingDeclsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VertexBlockContext vertexBlock() {
			return GetRuleContext<VertexBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniformBlockContext uniformBlock() {
			return GetRuleContext<UniformBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VertexStageContext vertexStage() {
			return GetRuleContext<VertexStageContext>(0);
		}
		public ShaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderContext shader() {
		ShaderContext _localctx = new ShaderContext(Context, State);
		EnterRule(_localctx, 0, RULE_shader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			shaderDecl();
			State = 35;
			usingDecls();
			State = 36;
			vertexBlock();
			State = 37;
			uniformBlock();
			State = 38;
			vertexStage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHADER() { return GetToken(shader_langParser.SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(shader_langParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(shader_langParser.SEMI, 0); }
		public ShaderDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterShaderDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitShaderDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderDeclContext shaderDecl() {
		ShaderDeclContext _localctx = new ShaderDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_shaderDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(SHADER);
			State = 41;
			Match(STRING);
			State = 42;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext[] usingDecl() {
			return GetRuleContexts<UsingDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext usingDecl(int i) {
			return GetRuleContext<UsingDeclContext>(i);
		}
		public UsingDeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDecls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterUsingDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitUsingDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclsContext usingDecls() {
		UsingDeclsContext _localctx = new UsingDeclsContext(Context, State);
		EnterRule(_localctx, 4, RULE_usingDecls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 44;
				usingDecl();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(shader_langParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(shader_langParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(shader_langParser.SEMI, 0); }
		public UsingDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterUsingDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitUsingDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclContext usingDecl() {
		UsingDeclContext _localctx = new UsingDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_usingDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(USING);
			State = 51;
			Match(STRING);
			State = 52;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERTEX() { return GetToken(shader_langParser.VERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(shader_langParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VertexDeclsContext vertexDecls() {
			return GetRuleContext<VertexDeclsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(shader_langParser.RCURLY, 0); }
		public VertexBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterVertexBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitVertexBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexBlockContext vertexBlock() {
		VertexBlockContext _localctx = new VertexBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_vertexBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(VERTEX);
			State = 55;
			Match(LCURLY);
			State = 56;
			vertexDecls();
			State = 57;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexDeclsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VertexDeclContext[] vertexDecl() {
			return GetRuleContexts<VertexDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VertexDeclContext vertexDecl(int i) {
			return GetRuleContext<VertexDeclContext>(i);
		}
		public VertexDeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexDecls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterVertexDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitVertexDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexDecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexDeclsContext vertexDecls() {
		VertexDeclsContext _localctx = new VertexDeclsContext(Context, State);
		EnterRule(_localctx, 10, RULE_vertexDecls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2031616L) != 0)) {
				{
				{
				State = 59;
				vertexDecl();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(shader_langParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(shader_langParser.SEMI, 0); }
		public VertexDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterVertexDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitVertexDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexDeclContext vertexDecl() {
		VertexDeclContext _localctx = new VertexDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_vertexDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			type();
			State = 66;
			Match(IDENTIFIER);
			State = 67;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VEC2() { return GetToken(shader_langParser.VEC2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VEC3() { return GetToken(shader_langParser.VEC3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VEC4() { return GetToken(shader_langParser.VEC4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT4() { return GetToken(shader_langParser.MAT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER2D() { return GetToken(shader_langParser.SAMPLER2D, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2031616L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniformBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIFORM() { return GetToken(shader_langParser.UNIFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(shader_langParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UniformDeclsContext uniformDecls() {
			return GetRuleContext<UniformDeclsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(shader_langParser.RCURLY, 0); }
		public UniformBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniformBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterUniformBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitUniformBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniformBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniformBlockContext uniformBlock() {
		UniformBlockContext _localctx = new UniformBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_uniformBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(UNIFORM);
			State = 72;
			Match(LCURLY);
			State = 73;
			uniformDecls();
			State = 74;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniformDeclsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UniformDeclContext[] uniformDecl() {
			return GetRuleContexts<UniformDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniformDeclContext uniformDecl(int i) {
			return GetRuleContext<UniformDeclContext>(i);
		}
		public UniformDeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniformDecls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterUniformDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitUniformDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniformDecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniformDeclsContext uniformDecls() {
		UniformDeclsContext _localctx = new UniformDeclsContext(Context, State);
		EnterRule(_localctx, 18, RULE_uniformDecls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2031616L) != 0)) {
				{
				{
				State = 76;
				uniformDecl();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniformDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(shader_langParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(shader_langParser.SEMI, 0); }
		public UniformDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniformDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterUniformDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitUniformDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniformDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniformDeclContext uniformDecl() {
		UniformDeclContext _localctx = new UniformDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_uniformDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			type();
			State = 83;
			Match(IDENTIFIER);
			State = 84;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexStageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(shader_langParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERTEX_STAGE() { return GetToken(shader_langParser.VERTEX_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(shader_langParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VertexStageParamsContext vertexStageParams() {
			return GetRuleContext<VertexStageParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(shader_langParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(shader_langParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VertexBodyContext vertexBody() {
			return GetRuleContext<VertexBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(shader_langParser.RCURLY, 0); }
		public VertexStageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexStage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterVertexStage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitVertexStage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexStage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexStageContext vertexStage() {
		VertexStageContext _localctx = new VertexStageContext(Context, State);
		EnterRule(_localctx, 22, RULE_vertexStage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(VOID);
			State = 87;
			Match(VERTEX_STAGE);
			State = 88;
			Match(LPAREN);
			State = 89;
			vertexStageParams();
			State = 90;
			Match(RPAREN);
			State = 91;
			Match(LCURLY);
			State = 92;
			vertexBody();
			State = 93;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexStageParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OUT() { return GetTokens(shader_langParser.OUT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT(int i) {
			return GetToken(shader_langParser.OUT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VertexStageParamContext[] vertexStageParam() {
			return GetRuleContexts<VertexStageParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VertexStageParamContext vertexStageParam(int i) {
			return GetRuleContext<VertexStageParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(shader_langParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(shader_langParser.COMMA, i);
		}
		public VertexStageParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexStageParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterVertexStageParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitVertexStageParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexStageParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexStageParamsContext vertexStageParams() {
		VertexStageParamsContext _localctx = new VertexStageParamsContext(Context, State);
		EnterRule(_localctx, 24, RULE_vertexStageParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(OUT);
			State = 96;
			vertexStageParam();
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 97;
				Match(COMMA);
				State = 98;
				Match(OUT);
				State = 99;
				vertexStageParam();
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexStageParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(shader_langParser.IDENTIFIER, 0); }
		public VertexStageParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexStageParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterVertexStageParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitVertexStageParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexStageParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexStageParamContext vertexStageParam() {
		VertexStageParamContext _localctx = new VertexStageParamContext(Context, State);
		EnterRule(_localctx, 26, RULE_vertexStageParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			type();
			State = 106;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public VertexBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterVertexBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitVertexBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexBodyContext vertexBody() {
		VertexBodyContext _localctx = new VertexBodyContext(Context, State);
		EnterRule(_localctx, 28, RULE_vertexBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 108;
				statement();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(shader_langParser.SEMI, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			assignment();
			State = 114;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(shader_langParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(shader_langParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(shader_langParser.EQUALS, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ishader_langListener typedListener = listener as Ishader_langListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ishader_langVisitor<TResult> typedVisitor = visitor as Ishader_langVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(IDENTIFIER);
			State = 117;
			Match(EQUALS);
			State = 118;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,26,121,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,5,2,46,
		8,2,10,2,12,2,49,9,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,5,5,61,8,
		5,10,5,12,5,64,9,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,5,9,
		78,8,9,10,9,12,9,81,9,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,5,12,101,8,12,10,12,12,12,104,
		9,12,1,13,1,13,1,13,1,14,4,14,110,8,14,11,14,12,14,111,1,15,1,15,1,15,
		1,16,1,16,1,16,1,16,1,16,0,0,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,0,1,1,0,16,20,108,0,34,1,0,0,0,2,40,1,0,0,0,4,47,1,0,0,0,6,50,1,
		0,0,0,8,54,1,0,0,0,10,62,1,0,0,0,12,65,1,0,0,0,14,69,1,0,0,0,16,71,1,0,
		0,0,18,79,1,0,0,0,20,82,1,0,0,0,22,86,1,0,0,0,24,95,1,0,0,0,26,105,1,0,
		0,0,28,109,1,0,0,0,30,113,1,0,0,0,32,116,1,0,0,0,34,35,3,2,1,0,35,36,3,
		4,2,0,36,37,3,8,4,0,37,38,3,16,8,0,38,39,3,22,11,0,39,1,1,0,0,0,40,41,
		5,1,0,0,41,42,5,23,0,0,42,43,5,12,0,0,43,3,1,0,0,0,44,46,3,6,3,0,45,44,
		1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,5,1,0,0,0,49,47,1,
		0,0,0,50,51,5,5,0,0,51,52,5,23,0,0,52,53,5,12,0,0,53,7,1,0,0,0,54,55,5,
		2,0,0,55,56,5,8,0,0,56,57,3,10,5,0,57,58,5,9,0,0,58,9,1,0,0,0,59,61,3,
		12,6,0,60,59,1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,11,1,
		0,0,0,64,62,1,0,0,0,65,66,3,14,7,0,66,67,5,22,0,0,67,68,5,12,0,0,68,13,
		1,0,0,0,69,70,7,0,0,0,70,15,1,0,0,0,71,72,5,3,0,0,72,73,5,8,0,0,73,74,
		3,18,9,0,74,75,5,9,0,0,75,17,1,0,0,0,76,78,3,20,10,0,77,76,1,0,0,0,78,
		81,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,19,1,0,0,0,81,79,1,0,0,0,82,
		83,3,14,7,0,83,84,5,22,0,0,84,85,5,12,0,0,85,21,1,0,0,0,86,87,5,4,0,0,
		87,88,5,21,0,0,88,89,5,10,0,0,89,90,3,24,12,0,90,91,5,11,0,0,91,92,5,8,
		0,0,92,93,3,28,14,0,93,94,5,9,0,0,94,23,1,0,0,0,95,96,5,6,0,0,96,102,3,
		26,13,0,97,98,5,13,0,0,98,99,5,6,0,0,99,101,3,26,13,0,100,97,1,0,0,0,101,
		104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,25,1,0,0,0,104,102,1,0,
		0,0,105,106,3,14,7,0,106,107,5,22,0,0,107,27,1,0,0,0,108,110,3,30,15,0,
		109,108,1,0,0,0,110,111,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,29,
		1,0,0,0,113,114,3,32,16,0,114,115,5,12,0,0,115,31,1,0,0,0,116,117,5,22,
		0,0,117,118,5,15,0,0,118,119,5,22,0,0,119,33,1,0,0,0,5,47,62,79,102,111
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
